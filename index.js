import express from "express"
import cors from "cors"
import bodyParser from "body-parser"
import dotenv from "dotenv"
import { generateText } from "ai"
import { google } from "@ai-sdk/google"

dotenv.config()

const app = express()
app.use(cors())
app.use(bodyParser.json())

// Models
const textModel = google("gemini-2.0-flash-exp")
const imageModel = google("gemini-2.0-flash-exp")

// Function to generate image using Gemini
async function generateImageWithGemini(text) {
  try {
    console.log("🎨 Generating image with Gemini...")
    console.log("📝 Text:", text.substring(0, 100) + "...")

    // Create a detailed prompt for better image generation
    const prompt = `Generate a high-resolution vertical 9:16 Instagram quote card image featuring the text: "${text}".

Design requirements:
- Elegant, aesthetic design suitable for Instagram stories
- Beautiful typography that's easy to read
-Make sure text is clear and readable else dont generate
- Soft pastel gradient background with artistic elements
- Professional, polished look without watermarks
- Include subtle design elements like sparkles, floral patterns, or elegant borders
- Dreamy, inspirational atmosphere
- High quality, Pinterest-style quote card design
- Text should be prominently displayed and readable
- Background should complement the message tone

Create a visually stunning image that would get engagement on social media.`

    const result = await generateText({
      model: imageModel,
      prompt: prompt,
      providerOptions: {
        google: {
          responseModalities: ["TEXT", "IMAGE"],
        },
      },
    })

    console.log("🔍 Checking result structure:", {
      hasFiles: !!result.files,
      filesLength: result.files?.length || 0,
      fileTypes: result.files?.map(f => f.mimeType) || []
    })

    // Check if any images were generated
    if (!result.files || result.files.length === 0) {
      throw new Error("No images were generated by Gemini")
    }

    // Find the first image file
    const imageFile = result.files.find((file) => file.mimeType.startsWith("image/"))

    if (!imageFile) {
      throw new Error("No image files found in Gemini response")
    }

    console.log("✅ Image generated successfully with Gemini!")
    console.log(`📊 Image type: ${imageFile.mimeType}`)
    console.log(`📊 Available properties:`, Object.keys(imageFile))

    // FIX: Use imageFile.base64 instead of imageFile.data
    if (!imageFile.base64) {
      throw new Error("Image file does not contain base64 data")
    }

    // Convert base64 data to buffer for consistency
    const imageBuffer = Buffer.from(imageFile.base64, "base64")

    return {
      buffer: imageBuffer,
      mimeType: imageFile.mimeType,
      base64: imageFile.base64, // Use the correct property
    }
  } catch (error) {
    console.error("❌ Gemini image generation error:", error.message)
    throw error
  }
}

// Main generation endpoint
app.post("/api/generate", async (req, res) => {
  try {
    const { name, message, style = "aesthetic" } = req.body

    if (!name || !message) {
      return res.status(400).json({
        error: "Both 'name' and 'message' are required fields.",
      })
    }

    console.log(`🚀 Starting generation for ${name}`)
    console.log(`💬 Message: "${message}"`)
    console.log(`🎨 Style: ${style}`)

    // Generate enhanced text using AI
    const textPrompt = `
Write a beautifully written, emotionally rich message for a friend named ${name}, using this input: "${message}".

Guidelines:
- Enhance the original message with deeper emotional layers and warmth
- Use poetic language and vivid descriptions where appropriate  
- Keep it concise (under 100 words) and heartfelt
- Make it flow as one cohesive, inspiring message
- Don't break it into separate sentences or bullet points

Output the enhanced message only:
`

    console.log("🤖 Generating enhanced text...")
    const textResult = await generateText({
      model: textModel,
      prompt: textPrompt,
    })
    const generatedText = textResult.text.trim()

    console.log("✅ Text generated successfully")
    console.log(`📝 Generated: "${generatedText.substring(0, 80)}..."`)

    // Generate image with Gemini
    console.log("🎨 Starting image generation with Gemini...")
    const imageResult = await generateImageWithGemini(generatedText)

    const response = {
      success: true,
      message: generatedText,
      imageBase64: `data:${imageResult.mimeType};base64,${imageResult.base64}`,
      imageUrl: `data:${imageResult.mimeType};base64,${imageResult.base64}`, // Add imageUrl for frontend compatibility
      metadata: {
        name: name,
        originalMessage: message,
        style: style,
        timestamp: new Date().toISOString(),
        imageSize: `${(imageResult.buffer.length / 1024 / 1024).toFixed(2)} MB`,
        mimeType: imageResult.mimeType,
        generator: "Google Gemini 2.0 Flash",
      },
    }

    console.log("🎉 Generation completed successfully with Gemini!")
    return res.json(response)
  } catch (error) {
    console.error("❌ Generation failed:", error)

    return res.status(500).json({
      success: false,
      error: "Generation failed",
      message: `Dear ${req.body?.name || "Friend"}, we're experiencing technical difficulties. Please try again in a moment.`,
      details: error.message,
    })
  }
})

// Image-only generation endpoint
app.post("/api/generate-image", async (req, res) => {
  try {
    const { text, style = "aesthetic" } = req.body

    if (!text) {
      return res.status(400).json({
        error: "Text is required for image generation",
      })
    }

    console.log("🎨 Generating image only with Gemini...")
    console.log(`📝 Text: "${text.substring(0, 80)}..."`)

    const imageResult = await generateImageWithGemini(text)

    return res.json({
      success: true,
      imageUrl: `data:${imageResult.mimeType};base64,${imageResult.base64}`,
      metadata: {
        text: text,
        style: style,
        timestamp: new Date().toISOString(),
        imageSize: `${(imageResult.buffer.length / 1024 / 1024).toFixed(2)} MB`,
        mimeType: imageResult.mimeType,
        generator: "Google Gemini 2.0 Flash",
      },
    })
  } catch (error) {
    console.error("❌ Image generation failed:", error)

    return res.status(500).json({
      success: false,
      error: "Image generation failed",
      details: error.message,
    })
  }
})

// Test endpoint to verify Gemini image generation
app.get("/api/test-gemini", async (req, res) => {
  try {
    const testText = "Hello, beautiful world!"
    console.log("🧪 Testing Gemini image generation...")

    const imageResult = await generateImageWithGemini(testText)

    return res.json({
      success: true,
      message: "Gemini image generation is working correctly!",
      imageSize: `${(imageResult.buffer.length / 1024 / 1024).toFixed(2)} MB`,
      mimeType: imageResult.mimeType,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("❌ Gemini test failed:", error)

    return res.status(500).json({
      success: false,
      error: "Gemini test failed",
      details: error.message,
    })
  }
})

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "healthy",
    service: "Gemini AI Image Generator",
    timestamp: new Date().toISOString(),
    model: "gemini-2.0-flash-exp",
    capabilities: ["text generation", "image generation"],
    endpoints: {
      "POST /api/generate": "Generate message + image",
      "POST /api/generate-image": "Generate image only",
      "GET /api/test-gemini": "Test Gemini image generation",
      "GET /api/health": "Health check",
    },
  })
})

// Error handling middleware
app.use((error, req, res, next) => {
  console.error("🚨 Unhandled error:", error)
  res.status(500).json({
    success: false,
    error: "Internal server error",
    message: "Something went wrong. Please try again.",
  })
})

const PORT = process.env.PORT || 3001

app.listen(PORT, () => {
  console.log(`✅ Server running on port ${PORT}`)
  console.log(`🤖 Using Google Gemini 2.0 Flash for text and image generation`)
  console.log(`🌐 API Base URL: http://localhost:${PORT}`)
  console.log(``)
  console.log(`📡 Available Endpoints:`)
  console.log(`   • POST /api/generate - Generate enhanced message + image`)
  console.log(`   • POST /api/generate-image - Generate image from text`)
  console.log(`   • GET /api/test-gemini - Test Gemini connectivity`)
  console.log(`   • GET /api/health - Health check`)
  console.log(``)
  console.log(`🚀 Ready to generate beautiful images with Gemini AI!`)
})

// Test the server with sample data
console.log("\n🧪 Testing the API endpoints...")

// Test health endpoint
setTimeout(async () => {
  try {
    const response = await fetch(`http://localhost:${PORT}/api/health`)
    const data = await response.json()
    console.log("✅ Health check:", data.status)
  } catch (error) {
    console.log("⏳ Server starting up...")
  }
}, 2000)

// Test generate endpoint with sample data
setTimeout(async () => {
  try {
    const testData = {
      name: "Sarah",
      message: "Hope you have a wonderful day!",
      style: "aesthetic"
    }
    
    console.log("\n🧪 Testing generation endpoint...")
    const response = await fetch(`http://localhost:${PORT}/api/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    })
    
    const result = await response.json()
    
    if (result.success) {
      console.log("✅ Generation test successful!")
      console.log("📝 Enhanced message:", result.message.substring(0, 100) + "...")
      console.log("🖼️ Image generated:", result.metadata.imageSize)
      console.log("🔗 Image URL available:", !!result.imageUrl)
    } else {
      console.log("❌ Generation test failed:", result.error)
    }
  } catch (error) {
    console.log("❌ Test failed:", error.message)
  }
}, 5000)
